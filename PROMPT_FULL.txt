FUTURIX-AI: SUPER DETAILED PROMPT FOR LLM OR LIGHTWEIGHT MODEL
=============================================================

Goal:
Build an extractor that, given the raw OCR text of an invoice or purchase order,
returns a JSON object with these fields (use best-effort heuristics; provide null when uncertain):
  - document_type: one of ["invoice","purchase_order","unknown"]
  - vendor_name
  - vendor_tax_id (gst, vat, tin, etc., if present)
  - buyer_name
  - buyer_tax_id
  - document_number
  - po_number (if present)
  - invoice_date (YYYY-MM-DD if possible)
  - due_date (YYYY-MM-DD if possible)
  - currency (ISO code if possible)
  - total_amount (numeric)
  - subtotal_amount (numeric or null)
  - tax_amount (numeric or null)
  - line_items: array of {
        description,
        sku (if present),
        unit_price (numeric or null),
        quantity (numeric or null),
        line_total (numeric or null)
    }
  - footnotes (any footer text)
  - raw_text_snippet: up to 300 chars of the OCR text near the detected total

Extraction rules and priorities:
1. Try to detect document_type using keywords:
   - invoice: "invoice", "tax invoice", "bill to", "invoice number"
   - purchase order: "purchase order", "po number", "order no."
   If both appear, prefer explicit headings (largest font) â€” else mark "unknown".
2. Normalize dates to ISO (YYYY-MM-DD). If ambiguous, look for context (e.g., 'Invoice Date:')
3. Currency extraction: prefer ISO or currency symbols and nearby 3-letter codes.
4. Numbers: accept both comma as thousands separators and dot as decimal separator.
   Convert to a numeric value (float). If multiple candidates for total_amount, prefer the one labeled "Total", "Grand Total" or appearing at bottom-right.
5. Line item detection:
   - Locate tabular regions that include columns like description, qty, unit, price, total.
   - If a clear table cannot be found, produce up to 5 best-effort line items using repeated patterns of "qty" and "price".
6. Confidence scoring (optional): for each field, return a confidence value 0.0-1.0 based on heuristics:
   - exact label match = 0.95
   - regex match with contextual keywords = 0.8
   - inferred from document layout = 0.6
   - fallback guess = 0.3

Output format (JSON):
{
  "document_type": "invoice",
  "vendor_name": "Acme Pvt Ltd",
  "vendor_tax_id": "GSTIN12345",
  "buyer_name": "...",
  "document_number": "INV-2025-001",
  "po_number": "PO-123",
  "invoice_date": "2025-10-05",
  "due_date": null,
  "currency": "INR",
  "total_amount": 12345.67,
  "subtotal_amount": 11700.00,
  "tax_amount": 645.67,
  "line_items": [
     {"description":"Widget A","sku":"W-A-01","unit_price":100.0,"quantity":10,"line_total":1000.0},
     ...
  ],
  "footnotes": "Thanks for your business",
  "raw_text_snippet": "..."
}

Validation rules for discrepancy detection (PO vs Invoice):
- Match by po_number first (if present).
- If po_number missing, match by vendor_name (normalized: lowercase, strip punctuation) + approximate date range (invoice_date within 30 days of expected delivery date).
- For each matched pair, flag:
  - quantity_mismatch: a line exists in PO with qty != invoice qty (tolerance configurable)
  - price_mismatch: unit_price differs by more than a configurable percentage (default 2%)
  - vendor_mismatch: vendor_name differs (use fuzzy matching with threshold)
  - currency_mismatch: currency mismatch
  - total_mismatch: invoice total differs from computed sum (line totals + tax)

Responses and tools:
- When provided with OCR text, always respond with the JSON extractor output.
- Provide metadata "extraction_warnings": list of textual warnings when fields are missing or low confidence.
- Provide a short "extraction_debug" field with which regexes / heuristics matched (for debugging during MVP).
